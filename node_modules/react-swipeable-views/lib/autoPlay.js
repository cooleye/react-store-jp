'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

exports.default = autoPlay;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactAddonsShallowCompare = require('react-addons-shallow-compare');

var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);

var _mod = require('./utils/mod');

var _mod2 = _interopRequireDefault(_mod);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ignore = {}; //  weak

function autoPlay(MyComponent) {
  var AutoPlay = function (_Component) {
    (0, _inherits3.default)(AutoPlay, _Component);

    function AutoPlay() {
      var _ref;

      var _temp, _this, _ret;

      (0, _classCallCheck3.default)(this, AutoPlay);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AutoPlay.__proto__ || (0, _getPrototypeOf2.default)(AutoPlay)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.timer = null, _this.handleInterval = function () {
        var _this$props = _this.props;
        var children = _this$props.children;
        var direction = _this$props.direction;
        var onChangeIndex = _this$props.onChangeIndex;
        var slideCount = _this$props.slideCount;


        var indexLatest = _this.state.index;
        var indexNew = indexLatest;

        if (direction === 'incremental') {
          indexNew += 1;
        } else {
          indexNew -= 1;
        }

        if (slideCount || children) {
          indexNew = (0, _mod2.default)(indexNew, slideCount || _react.Children.count(children));
        }

        if (onChangeIndex) {
          onChangeIndex(indexNew, indexLatest);
        } else {
          _this.setState({
            index: indexNew
          });
        }
      }, _this.handleChangeIndex = function (index, indexLatest) {
        if (_this.props.onChangeIndex) {
          _this.props.onChangeIndex(index, indexLatest);
        } else {
          _this.setState({
            index: index
          });
        }
      }, _this.handleSwitching = function (index, type) {
        if (_this.timer) {
          clearInterval(_this.timer);
          _this.timer = null;
        } else if (type === 'end') {
          _this.startInterval();
        }

        if (_this.props.onSwitching) {
          _this.props.onSwitching(index, type);
        }
      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(AutoPlay, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this.setState({
          index: this.props.index
        });
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.startInterval();
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        var index = nextProps.index;


        if (typeof index === 'number' && index !== this.props.index) {
          this.setState({
            index: index
          });
        }
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        var shouldResetInterval = (0, _reactAddonsShallowCompare2.default)({
          props: {
            index: prevProps.index,
            interval: prevProps.interval,
            autoplay: prevProps.autoplay
          },
          state: ignore
        }, {
          index: this.props.index,
          interval: this.props.interval,
          autoplay: this.props.autoplay
        }, ignore);

        if (shouldResetInterval) {
          this.startInterval();
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        clearInterval(this.timer);
      }
    }, {
      key: 'startInterval',
      value: function startInterval() {
        var _props = this.props;
        var autoplay = _props.autoplay;
        var interval = _props.interval;


        clearInterval(this.timer);

        if (autoplay) {
          this.timer = setInterval(this.handleInterval, interval);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _props2 = this.props;
        var autoplay = _props2.autoplay;
        var direction = _props2.direction;
        var interval = _props2.interval;
        var indexProp = _props2.index;
        var onChangeIndex = _props2.onChangeIndex;
        var other = (0, _objectWithoutProperties3.default)(_props2, ['autoplay', 'direction', 'interval', 'index', 'onChangeIndex']);


        if (!autoplay) {
          return _react2.default.createElement(MyComponent, (0, _extends3.default)({
            index: indexProp
          }, other));
        }

        var index = this.state.index;


        return _react2.default.createElement(MyComponent, (0, _extends3.default)({
          index: index,
          onChangeIndex: this.handleChangeIndex,
          onSwitching: this.handleSwitching
        }, other));
      }
    }]);
    return AutoPlay;
  }(_react.Component);

  AutoPlay.defaultProps = {
    autoplay: true,
    direction: 'incremental',
    index: 0,
    interval: 3000
  };
  process.env.NODE_ENV !== "production" ? AutoPlay.propTypes = {
    /**
     * If `false`, the auto play behavior is disabled.
     */
    autoplay: _react.PropTypes.bool,
    /**
     * @ignore
     */
    children: _react.PropTypes.node,
    /**
     * This is the auto play direction.
     */
    direction: _react.PropTypes.oneOf(['incremental', 'decremental']),
    /**
     * @ignore
     */
    index: _react.PropTypes.number,
    /**
     * Delay between auto play transitions (in ms).
     */
    interval: _react.PropTypes.number,
    /**
     * @ignore
     */
    onChangeIndex: _react.PropTypes.func,
    /**
     * @ignore
     */
    onSwitching: _react.PropTypes.func,
    /**
     * @ignore
     */
    slideCount: _react.PropTypes.number
  } : void 0;


  return AutoPlay;
}